model <- glm(formula, family = binomial(link = link), data = data)
#Haciendolo Backward
modelo_step <- step(
object = model,
direction = "backward",
scope = list(upper = model, lower = ~1),
trace = FALSE
)
return(modelo_step)
}
# Ejemplos de las demas formas de hacer Stepwise
#Haciendolo Fordward
#modelo_forward <- step(
#  object = modelo_nulo,
#  direction = "forward",
#  scope = list(lower = ~1, upper =  modelo),
#  trace = FALSE
#)
# En ambas direcciones
#modelo_both <- step(
#  object = modelo_nulo,
#  scope = list(lower = ~1, upper = modelo),
#  direction = "both",
#  trace = FALSE
#)
#Funcion para genralizar la funcion lasso y pdoer evalur distintos modelos
#Parametros:
# modelo: modelo de regresion a evaluar
Rugalarizacion_Lasso <- function(modelo, link = "logit", data = PimaIndiansDiabetes){
formula <- as.formula(paste("diabetes ~", modelo ))
x <- model.matrix(formula , data = data)[, -1] #Quitando el intercepto
y <- data$diabetes  #Variables binarias de si el paciente tiene o no diabetes
#Ajusta el modelo lasso a nuestro modelo de regresion  sirve para ver las trayectoras de nuestro parametro lambda
modelo_lasso <- glmnet(
x = x,
y = y,
family = binomial(link = link),
alpha = 1,
standardize = TRUE,
nlambda = 100
)
#Ahora toca elegir el mejor lambda, para eso utilizaremos la validacion cruzada
cv_error <- cv.glmnet(
x      = x,
y      = y,
alpha  = 1,
nfolds = 10,
family = binomial(link = link),
type.measure = "deviance",
standardize  = TRUE
)
modelOut <- glmnet(
x           = x,
y           = y,
family = binomial(link = link),
alpha       = 1,
lambda      = cv_error$lambda.1se,
standardize = TRUE
)
df_coeficientes <- coef(modelOut) %>%
as.matrix() %>%
as_tibble(rownames = "predictor") %>%
rename(coeficiente = s0)
out <- df_coeficientes %>%
filter(
predictor != "(Intercept)",
coeficiente != 0
)
salida <- list(
modelo_lasso = modelo_lasso,
cv_error = cv_error,
coefs = out
)
return(salida)
}
#Fucnion para graficar como se ve la caide del parametro lambda en el ajuste lasso
#Parametros:
# modelo: model, tenemos que pasar la salida de model_lasso, para que funcione y se calcule de la funcion Regularizacion_lasso
graficacion_lasso <- function(param, data = PimaIndiansDiabetes){
model_lasso = param$modelo_lasso
regularizacion <- model_lasso$beta %>%
as.matrix() %>%
t() %>%
as_tibble() %>%
mutate(lambda = model_lasso$lambda)
regularizacion <- regularizacion %>%
pivot_longer(
cols = !lambda,
names_to = "predictor",
values_to = "coeficientes"
)
regularizacion %>%
ggplot(aes(x = lambda, y = coeficientes, color = predictor)) +
geom_line() +
scale_x_log10(
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))
) +
labs(title = "Coeficientes del modelo en función de la regularización") +
theme_bw() +
theme(legend.position = "none")
}
#Formula para recrear el modelo, a partir de las variables que nos dio la seleccion lasso
#Parametros:
# params: Modelo de lasso que le metemos a nuestro algoritmo para que funciones
# link: tipo de link que queremos usar, por defecto es logit
AIC_lasso <- function(params, link="logit", data = PimaIndiansDiabetes){
coeficientes <-   params$coefs$predictor#
formula_GLM <- as.formula(paste("diabetes ~", paste(coeficientes, collapse = "+")))
model <- glm(formula_GLM, family = binomial(link = link), data = data)
sal <- list(
model = model,
AIC = AIC(model)
)
return(sal)
}
# graficacion_lasso(simple )
joinData <- function(lista){
vars_sin_intercept <- setdiff(lista, "(Intercept)")
string_vars <- paste(vars_sin_intercept, collapse = ",")
return(string_vars)
}
# Pregunta A-----------------------------------------------------------------------------------------------------------------------------------------------------------------
besSubset <- mejor_Subset(link = "logit")
df_resultados <-nueva_fila_resultados( "BS logit", besSubset$BestModel$aic, length(besSubset$BestModel$coefficients)-1, joinData(names(besSubset$BestModel$coefficients)))
modeloInteracciones <- StepwiseBack(" . ", "logit") # Modelo simple Stepwise
df_resultados <- nueva_fila_resultados("SW_B logit", AIC(modeloInteracciones), length(modeloInteracciones$coefficients)-1, joinData(names(modeloInteracciones$coefficients)))
simple <- Rugalarizacion_Lasso(" . ", "logit")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L logit", AIC_lasso(simple, "logit")$AIC, length(simple$coefs$predictor), joinData(simple$coefs$predictor))
# Pregunta B-----------------------------------------------------------------------------------------------------------------------------------------------------------------
StepB <- StepwiseBack(modelo2, link = "logit") # Modelo cuadratico Stepwise
df_resultados <- nueva_fila_resultados("SW_B m2 logit", AIC(StepB), length(StepB$coefficients)-1, joinData(names(StepB$coefficients )))
lassoB <- Rugalarizacion_Lasso(modelo2, link = "logit")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L m2 logit", AIC_lasso(lassoB, "logit")$AIC, length(lassoB$coefs$predictor), joinData(lassoB$coefs$predictor ))
# Pregunta C-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#Usando liga probit
besSubsetProbit <- mejor_Subset(link = "probit")
df_resultados <-nueva_fila_resultados( "BS probit", besSubsetProbit$BestModel$aic, length(besSubsetProbit$BestModel$coefficients)-1, joinData(names(besSubsetProbit$BestModel$coefficients)))
modeloInteraccionesProbit <- StepwiseBack(" . ", "probit") # Modelo simple Stepwise
df_resultados <- nueva_fila_resultados("SW_B probit", AIC(modeloInteraccionesProbit), length(modeloInteraccionesProbit$coefficients)-1, joinData(names(modeloInteraccionesProbit$coefficients)))
simpleProbit <- Rugalarizacion_Lasso(" . ", "probit")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L probit", AIC_lasso(simpleProbit, "probit")$AIC, length(simpleProbit$coefs$predictor)-1, joinData(simpleProbit$coefs$predictor))
StepBprobit <- StepwiseBack(modelo2, link = "probit") # Modelo cuadratico Stepwise
df_resultados <- nueva_fila_resultados("SW_B m2 probit", AIC(StepBprobit), length(StepBprobit$coefficients)-1, joinData(names(StepBprobit$coefficients)))
lassoBprobit <- Rugalarizacion_Lasso(modelo2, link = "probit")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L m2 probit", AIC_lasso(lassoBprobit, "probit")$AIC, length(lassoBprobit$coefs$predictor)-1, joinData(lassoBprobit$coefs$predictor))
#Usando liga cloglog
besSubsetcloglog <- mejor_Subset(link = "cloglog")
df_resultados <-nueva_fila_resultados( "BS cloglog", besSubsetcloglog$BestModel$aic, length(besSubsetcloglog$BestModel$coefficients)-1, joinData(names(besSubsetcloglog$BestModel$coefficients)))
modeloInteraccionescloglog <- StepwiseBack(" . ", "cloglog") # Modelo simple Stepwise
df_resultados <- nueva_fila_resultados("SW_B cloglog", AIC(modeloInteraccionescloglog), length(modeloInteraccionescloglog$coefficients)-1, joinData(names(modeloInteraccionescloglog$coefficients)))
simplecloglog <- Rugalarizacion_Lasso(" . ", "cloglog")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L cloglog", AIC_lasso(simplecloglog, "cloglog")$AIC, length(simplecloglog$coefs$predictor)-1, joinData(simplecloglog$coefs$predictor))
StepBcloglog <- StepwiseBack(modelo2, link = "cloglog") # Modelo cuadratico Stepwise
df_resultados <- nueva_fila_resultados("SW_B m2 cloglog", AIC(StepBcloglog), length(StepBcloglog$coefficients)-1, joinData(names(StepBcloglog$coefficients)))
lassoBcloglog <- Rugalarizacion_Lasso(modelo2, link = "cloglog")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L m2 cloglog", AIC_lasso(lassoBcloglog, "cloglog")$AIC, length(lassoBcloglog$coefs$predictor)-1, joinData(lassoBcloglog$coefs$predictor))
# Tranformando  variables
besSubset <- mejor_Subset(link = "logit", ln_diabetes)
df_resultados <-nueva_fila_resultados( "BS ln logit", besSubset$BestModel$aic, length(besSubset$BestModel$coefficients)-1, joinData(names(besSubset$BestModel$coefficients)))
modeloInteracciones <- StepwiseBack(" . ", "logit", ln_diabetes) # Modelo simple Stepwise
df_resultados <- nueva_fila_resultados("SW_B ln logit", AIC(modeloInteracciones), length(modeloInteracciones$coefficients)-1, joinData(names(modeloInteracciones$coefficients)))
simple <- Rugalarizacion_Lasso(" . ", "logit", ln_diabetes)   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L ln logit", AIC_lasso(simple, "logit")$AIC, length(simple$coefs$predictor), joinData(simple$coefs$predictor))
StepB <- StepwiseBack(modelo2, link = "logit", ln_diabetes) # Modelo cuadratico Stepwise
df_resultados <- nueva_fila_resultados("SW_B m2 ln logit", AIC(StepB), length(StepB$coefficients)-1, joinData(names(StepB$coefficients)))
lassoB <- Rugalarizacion_Lasso(modelo2, link = "logit", ln_diabetes)   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L m2 ln logit", AIC_lasso(lassoB, "logit")$AIC, length(lassoB$coefs$predictor)  , joinData(lassoB$coefs$predictor))
resultados <- df_resultados %>%
dplyr::select(Metodo, AIC, numero_bettas)
ggplot(resultados) +
aes(x = Metodo, y = AIC, fill = numero_bettas) +
geom_col() +
scale_fill_gradient(low = "#1687B2", high = "#0C2874") +
labs(title = "Modelos vs AIC") +
coord_flip() +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10L),
axis.text.x = element_text(size = 9L,
angle = 45L)
)
#esquisser(resultados)
resultados <- df_resultados %>%
dplyr::select(Metodo, AIC, numero_bettas)
resultados <- df_resultados %>%
dplyr::select(Metodo, AIC, numero_bettas)
knitr::kable(resultados, caption = "Tabla de resultados")
View(df_resultados)
histomraw <- joinData(df_resultados$variables_select)
dataHist <- unlist(strsplit(histomraw, ",\\s*"))
dataHist_limpio <- gsub("^I\\((.*)\\)$", "\\1", dataHist) #Limpiar los nombres de las variables
# Tabla de frecuencias
tabla <- table(dataHist_limpio)
# Convertir a data frame
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("variable", "frecuencia")
ggplot(df_tabla, aes(x = reorder(variable, frecuencia), y = frecuencia)) +
geom_bar(stat = "identity", fill = "#0C4C8A") +
labs(title = "Comparativa de variables seleccionadas  ",
x = "Variables",
y = "Frecuencia") +
coord_flip() +
theme_minimal()
getwd()
setwd("C:/Users/ferna/Documents/Seminario_Estadistica/Proyecto_2/Ejercicio_2")
rmarkdown::render("main.Rmd")
resultados <- df_resultados %>%
dplyr::select(Metodo, AIC, numero_bettas)
knitr::kable(resultados, caption = "Tabla de resultados")
ggplot(resultados) +
aes(x = Metodo, y = AIC, fill = numero_bettas) +
geom_col() +
scale_fill_gradient(low = "#1687B2", high = "#0C2874") +
labs(title = "Modelos vs AIC") +
coord_flip() +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10L),
axis.text.x = element_text(size = 9L,
angle = 45L)
)
#esquisser(resultados)
histomraw <- joinData(df_resultados$variables_select)
dataHist <- unlist(strsplit(histomraw, ",\\s*"))
dataHist_limpio <- gsub("^I\\((.*)\\)$", "\\1", dataHist) #Limpiar los nombres de las variables
# Tabla de frecuencias
tabla <- table(dataHist_limpio)
# Convertir a data frame
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("variable", "frecuencia")
ggplot(df_tabla, aes(x = reorder(variable, frecuencia), y = frecuencia)) +
geom_bar(stat = "identity", fill = "#0C4C8A") +
labs(title = "Comparativa de variables seleccionadas  ",
x = "Variables",
y = "Frecuencia") +
coord_flip() +
theme_minimal()
library(patchwork)
g1 <- ggplot(resultados) +
aes(x = Metodo, y = AIC, fill = numero_bettas) +
geom_col() +
scale_fill_gradient(low = "#1687B2", high = "#0C2874") +
labs(title = "Modelos vs AIC") +
coord_flip() +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10L),
axis.text.x = element_text(size = 9L,
angle = 45L)
)
#esquisser(resultados)
histomraw <- joinData(df_resultados$variables_select)
dataHist <- unlist(strsplit(histomraw, ",\\s*"))
dataHist_limpio <- gsub("^I\\((.*)\\)$", "\\1", dataHist) #Limpiar los nombres de las variables
# Tabla de frecuencias
tabla <- table(dataHist_limpio)
# Convertir a data frame
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("variable", "frecuencia")
g2 <- ggplot(df_tabla, aes(x = reorder(variable, frecuencia), y = frecuencia)) +
geom_bar(stat = "identity", fill = "#0C4C8A") +
labs(title = "Comparativa de variables seleccionadas  ",
x = "Variables",
y = "Frecuencia") +
coord_flip() +
theme_minimal()
g1 + g2
g1 + g2
resultados <- df_resultados %>%
dplyr::select(Metodo, AIC, numero_bettas)
knitr::kable(resultados, caption = "Tabla de resultados")
setwd("C:/Users/ferna/Documents/Seminario_Estadistica/Proyecto_2/Ejercicio_2")
rmarkdown::render("main.Rmd")
rmarkdown::render("main.Rmd")
g1 + g2
g1 + g2
# Pregunta A-----------------------------------------------------------------------------------------------------------------------------------------------------------------
besSubset <- mejor_Subset(link = "logit")
df_resultados <-nueva_fila_resultados( "BS logit", besSubset$BestModel$aic, length(besSubset$BestModel$coefficients)-1, joinData(names(besSubset$BestModel$coefficients)))
modeloInteracciones <- StepwiseBack(" . ", "logit") # Modelo simple Stepwise
df_resultados <- nueva_fila_resultados("SW_B logit", AIC(modeloInteracciones), length(modeloInteracciones$coefficients)-1, joinData(names(modeloInteracciones$coefficients)))
simple <- Rugalarizacion_Lasso(" . ", "logit")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L logit", AIC_lasso(simple, "logit")$AIC, length(simple$coefs$predictor), joinData(simple$coefs$predictor))
# Pregunta B-----------------------------------------------------------------------------------------------------------------------------------------------------------------
StepB <- StepwiseBack(modelo2, link = "logit") # Modelo cuadratico Stepwise
df_resultados <- nueva_fila_resultados("SW_B m2 logit", AIC(StepB), length(StepB$coefficients)-1, joinData(names(StepB$coefficients )))
lassoB <- Rugalarizacion_Lasso(modelo2, link = "logit")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L m2 logit", AIC_lasso(lassoB, "logit")$AIC, length(lassoB$coefs$predictor), joinData(lassoB$coefs$predictor ))
# Pregunta C-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#Usando liga probit
besSubsetProbit <- mejor_Subset(link = "probit")
df_resultados <-nueva_fila_resultados( "BS probit", besSubsetProbit$BestModel$aic, length(besSubsetProbit$BestModel$coefficients)-1, joinData(names(besSubsetProbit$BestModel$coefficients)))
modeloInteraccionesProbit <- StepwiseBack(" . ", "probit") # Modelo simple Stepwise
df_resultados <- nueva_fila_resultados("SW_B probit", AIC(modeloInteraccionesProbit), length(modeloInteraccionesProbit$coefficients)-1, joinData(names(modeloInteraccionesProbit$coefficients)))
simpleProbit <- Rugalarizacion_Lasso(" . ", "probit")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L probit", AIC_lasso(simpleProbit, "probit")$AIC, length(simpleProbit$coefs$predictor)-1, joinData(simpleProbit$coefs$predictor))
StepBprobit <- StepwiseBack(modelo2, link = "probit") # Modelo cuadratico Stepwise
df_resultados <- nueva_fila_resultados("SW_B m2 probit", AIC(StepBprobit), length(StepBprobit$coefficients)-1, joinData(names(StepBprobit$coefficients)))
lassoBprobit <- Rugalarizacion_Lasso(modelo2, link = "probit")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L m2 probit", AIC_lasso(lassoBprobit, "probit")$AIC, length(lassoBprobit$coefs$predictor)-1, joinData(lassoBprobit$coefs$predictor))
#Usando liga cloglog
besSubsetcloglog <- mejor_Subset(link = "cloglog")
df_resultados <-nueva_fila_resultados( "BS cloglog", besSubsetcloglog$BestModel$aic, length(besSubsetcloglog$BestModel$coefficients)-1, joinData(names(besSubsetcloglog$BestModel$coefficients)))
modeloInteraccionescloglog <- StepwiseBack(" . ", "cloglog") # Modelo simple Stepwise
df_resultados <- nueva_fila_resultados("SW_B cloglog", AIC(modeloInteraccionescloglog), length(modeloInteraccionescloglog$coefficients)-1, joinData(names(modeloInteraccionescloglog$coefficients)))
simplecloglog <- Rugalarizacion_Lasso(" . ", "cloglog")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L cloglog", AIC_lasso(simplecloglog, "cloglog")$AIC, length(simplecloglog$coefs$predictor)-1, joinData(simplecloglog$coefs$predictor))
StepBcloglog <- StepwiseBack(modelo2, link = "cloglog") # Modelo cuadratico Stepwise
df_resultados <- nueva_fila_resultados("SW_B m2 cloglog", AIC(StepBcloglog), length(StepBcloglog$coefficients)-1, joinData(names(StepBcloglog$coefficients)))
lassoBcloglog <- Rugalarizacion_Lasso(modelo2, link = "cloglog")   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L m2 cloglog", AIC_lasso(lassoBcloglog, "cloglog")$AIC, length(lassoBcloglog$coefs$predictor)-1, joinData(lassoBcloglog$coefs$predictor))
# Tranformando  variables
besSubsetc <- mejor_Subset(link = "logit", ln_diabetes)
df_resultados <-nueva_fila_resultados( "BS ln logit", besSubsetc$BestModel$aic, length(besSubsetc$BestModel$coefficients)-1, joinData(names(besSubsetc$BestModel$coefficients)))
modeloInteraccionesc <- StepwiseBack(" . ", "logit", ln_diabetes) # Modelo simple Stepwise
df_resultados <- nueva_fila_resultados("SW_B ln logit", AIC(modeloInteraccionesc), length(modeloInteraccionesc$coefficients)-1, joinData(names(modeloInteraccionesc$coefficients)))
simplec <- Rugalarizacion_Lasso(" . ", "logit", ln_diabetes)   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L ln logit", AIC_lasso(simplec, "logit")$AIC, length(simplec$coefs$predictor), joinData(simplec$coefs$predictor))
StepBc <- StepwiseBack(modelo2, link = "logit", ln_diabetes) # Modelo cuadratico Stepwise
df_resultados <- nueva_fila_resultados("SW_B m2 ln logit", AIC(StepBc), length(StepBc$coefficients)-1, joinData(names(StepBc$coefficients)))
lassoBc <- Rugalarizacion_Lasso(modelo2, link = "logit", ln_diabetes)   #Ejecutando nuestro primer modelo lasso
df_resultados <- nueva_fila_resultados("L m2 ln logit", AIC_lasso(lassoBc, "logit")$AIC, length(lassoBc$coefs$predictor)  , joinData(lassoBc$coefs$predictor))
library(tibble)
df_coeficientes <- lassoBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
lassoBc
library(tibble)
df_coeficientes <- modelo$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
lassoBc$coefficients
library(tibble)
df_coeficientes <- modelo$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
lassoBc$coefficients
library(tibble)
df_coeficientes <- modelo$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
length(StepBc$coefficients)-1
StepBc$coefficients
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
esquisse(df_coeficientes)
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
esquisse(df_coeficientes)
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
library(esquisse)
esquisse(df_coeficientes)
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
library(esquisse)
esquisse(df_coeficientes)
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
library(esquisse)
esquisser(df_coeficientes)
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot(df_coeficientes) +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
labs(title = "Coeficintes modelo selesccionado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45L))
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
labs(title = "Coeficintes modelo selesccionado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45L))
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
theme_minimal()
library(esquisse)
esquisser(df_coeficientes)
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
labs(title = "Coeficintes modelo selesccionado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45L))
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
labs(title = "Coeficientes del modelo seleccionado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45L))
setwd("C:/Users/ferna/Documents/Seminario_Estadistica/Proyecto_2/Ejercicio_2")
rmarkdown::render("main.Rmd")
# Cargar el dataset
data("PimaIndiansDiabetes")
df_resultados <- data.frame(
Metodo = character(),
AIC = numeric(),
numero_bettas = integer(),
variables_select = character(),
stringsAsFactors = FALSE
)
nueva_fila_resultados <- function( metodo, AIC, numero_bettas, vars) {
fila <- data.frame(
Metodo = metodo,
AIC = AIC,
numero_bettas = numero_bettas,
variables_select = vars,
stringsAsFactors = FALSE
)
df_resultados <- rbind(df_resultados, fila)
return(df_resultados)
}
setwd("C:/Users/ferna/Documents/Seminario_Estadistica/Proyecto_2/Ejercicio_2")
rmarkdown::render("main.Rmd")
rmarkdown::render("main.Rmd")
rmarkdown::render("main.Rmd")
rmarkdown::render("main.Rmd")
g1 + g2
library(tibble)
df_coeficientes <- StepBc$coefficients %>%
enframe(name = "predictor", value = "coeficiente")
df_coeficientes %>%
filter(predictor != "(Intercept)") %>%
ggplot() +
aes(x = predictor, y = coeficiente) +
geom_col(fill = "#0C4C8A") +
labs(title = "Coeficientes del modelo seleccionado") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45L))
rmarkdown::render("main.Rmd")
rmarkdown::render("main.Rmd")
rmarkdown::render("main.Rmd")
rmarkdown::render("main.Rmd")
